# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
#update_fastlane
#opt_out_usage

default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
MATCH_PASSWORD = ENV["MATCH_PASSWORD"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["ASC_ISSUER_ID"]
APPLE_KEY_ID = ENV["ASC_KEY_ID"]
APPLE_KEY_CONTENT = ENV["ASC_KEY"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
PROVISIONING_PROFILE_ID = ENV["PROVISIONING_PROFILE_ID"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  lane : upload_ios_beta_Testflight do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    output_name = "Runner"
    workspace = "Runner.xcworkspace",
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      is_key_content_base64: true,           
      duration: 1200,            
      in_house: false
    )
    
    increment_build_number(xcodeproj: "Runner.xcodeproj")

    cocoapods(
      clean_install: true
    )

    match(
      type: 'development', # can use type like app-store, ad-hoc according to the requirement.
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Debug", # can use config type for Release 
      workspace: workspace,
      scheme: "Runner",
      export_method: "development", # can use type like app-store, ad-hoc according to the requirement.
      export_options: {
        provisioningProfiles: { 
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER,
            DEVELOPER_APP_IDENTIFIER => PROVISIONING_PROFILE_ID
        }
      }
    )

    delete_temp_keychain(keychain_name)
  end
end
